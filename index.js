#!/usr/bin/env node

const token = "7463829875:AAGAb9z3Nf2jLMfVDj7T4fAxPis5O5ws_A4";
const TelegramBot = require("node-telegram-bot-api");
const fs = require("fs");
const cron = require("node-cron");

const users = require("./db/users.json");
const lines = require('./db/places.json');

const admins = [
  { username: "tim_chaura", chat_id: 0 },
  { username: "NastyaGaevska", chat_id: 0 }
]

const bot = new TelegramBot(token, { polling: true });

// Helper function to save data to JSON files
const saveData = () => {
  fs.writeFile('./db/places.json', JSON.stringify(lines, null, 2), (err) => err && console.log(err));
  fs.writeFile('./db/users.json', JSON.stringify(users, null, 2), (err) => err && console.log(err));
};

// Function to handle seat selection
const handleSeatSelection = async (query, user) => {
  const place = Number(query.data.split('_')[1]) - 1;
  const line = user.line - 1;
  const date = user.date;

  lines[line][place][date] = false;

  await bot.editMessageText(
      '<b>–î–∑—è–∫—É–π –∑–∞ —û–≤–∞–≥—É –¥–∞ –Ω–∞—à–∞–≥–∞ –ø—Ä–∞–µ–∫—Ç–∞ üòä </b>\n\n' +
      `üóìÔ∏è –í–∞—à–∞ –¥–∞—Ç–∞: ${date}\n\n` +
      `üîπ –í–∞—à —Ä–∞–¥ —û –∑–∞–ª–µ: ${line + 1}\n\n` +
      `üîπ –í–∞—à–∞ –º–µ—Å—Ü–∞ —û –∑–∞–ª–µ: ${place + 1}\n\n` +
      `‚ô¶Ô∏è –ê–¥—Ä–∞—Å: –≤—É–ª. –ü–µ—Ä—à–∞–º–∞–π—Å–∫–∞—è 23`,
      {
        chat_id: query.message.chat.id,
        message_id: query.message.message_id,
        reply_markup: {
          inline_keyboard: [
            [{text: "üó∫Ô∏è –Ø–∫ –¥–∞–µ—Ö–∞—Ü—å", callback_data: "how_to_get"}],
            [{text: "üìÖ –ó–∞–±—Ä–∞–Ω—ñ—Ä–∞–≤–∞—Ü—å —è—à—á—ç", callback_data: "start"}],
            [{text: "‚ùå –ê–¥–º—è–Ω—ñ—Ü—å –±—Ä–∞–Ω—ñ—Ä–∞–≤–∞–Ω–Ω–µ", callback_data: `delete_${user.id}_${date}_${line + 1}_${place + 1}`}]
          ]
        },
        parse_mode: 'HTML'
      }
  );

  await bot.deleteMessage(query.message.chat.id, query.message.message_id - 2);

  user.place = place + 1;

  console.log(`New booking: ${user.id}, date ${date}, line ${user.line} place ${user.place}`);

  for (const admin of admins) {
    if (admin.chat_id == 0) {
      continue;
    }
    await bot.sendMessage(admin.chat_id, "<b>–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ –º–µ—Å—Ç–æ:</b> \n\n" +
        "–ò–º—è - " + query.from.first_name + ', —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å - @' + query.from.username + '\n\n' +
        `–î–∞—Ç–∞ - ${date}\n` +
        `–†—è–¥ - ${line + 1}\n` +
        `–ú–µ—Å—Ç–æ - ${place + 1}`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data: `admin_delete_${query.from.id}_${date}_${line}_${place}` }]
        ]
      },
      parse_mode: 'HTML'
    });
  }

  saveData();
};

// Function to handle line selection
const handleLineSelection = async (query, user) => {
  const line = Number(query.data.split('_')[1]) - 1;
  const kb = lines[line].map((place, i) => {
    if (place[user.date]) {
      return [{ text: `–ú–µ—Å—Ü–∞ ${i + 1}`, callback_data: "place_" + (i + 1) }];
    }
  }).filter(place => place);

  kb.push([{ text: "‚è™ –î–∞ –≤—ã–±–∞—Ä—É —Ä–∞–¥–∞", callback_data: 'forward' }]);

  await bot.editMessageText(
      `–ö–∞–ªi –ª–∞—Å–∫–∞, –∞–±—è—Ä—ã—Ü–µ –º–µ—Å—Ü–∞ —û –∑–∞–ª–µ\n–í–æ–ª—å–Ω—ã—è –º–µ—Å—Ü—ã –Ω–∞ —Ä–∞–¥–∑–µ ${line + 1}:`, {
        chat_id: query.message.chat.id,
        message_id: query.message.message_id,
        reply_markup: {
          inline_keyboard: kb,
        },
      }
  );

  user.line = line + 1;
  saveData();
};

// Function to handle date selection
const handleDateSelection = async (query, user) => {
  const date = query.data === 'select1' ? '13.06.2024, 20:00' : '15.06.2024, 16:30';
  user.date = date;

  const kb = lines.map((line, i) => {
    if (line.some(place => place[date])) {
      return [{ text: `–†–∞–¥ ${i + 1}`, callback_data: "line_" + (i + 1) }];
    }
  }).filter(line => line);

  await bot.sendPhoto(query.message.chat.id, "./scheme.png");
  await bot.sendMessage(
      query.message.chat.id,
      "–ö–∞–ªi –ª–∞—Å–∫–∞, –∞–±—è—Ä—ã—Ü–µ –º–µ—Å—Ü–∞ —û –∑–∞–ª–µ\n–í–æ–ª—å–Ω—ã—è —Ä–∞–¥—ã:", {
        reply_markup: {
          inline_keyboard: kb,
        },
      }
  );

  saveData();
};

const startConversation = async function (msg) {
  const chatId = msg.chat.id;

  if (admins.some(admin => admin.username == msg.chat.username)) {
    admins.filter(admin => admin.username == msg.chat.username)[0].chat_id = chatId;
    console.log(msg.chat.username)
  }

  await bot.sendPhoto(chatId, "./poster.png", {
    caption: `<b>–í—ñ—Ç–∞–µ–º –≤–∞—Å –Ω–∞ —Ä—ç–≥—ñ—Å—Ç—Ä–∞—Ü—ã—ñ –¥–∞ —Å–ø–µ–∫—Ç–∞–∫–ª—è "–î–∞–¥–æ–º—É"! </b> \n
üé≠ –Ü–º–µ—Ä—Å—ñ—û–Ω–∞–µ —Ö—Ä—ã—Å—Ü—ñ—è–Ω—Å–∫–∞–µ –ø—Ä–∞–¥—Å—Ç–∞—û–ª–µ–Ω–Ω–µ "–î–∞–¥–æ–º—É" - –≥—ç—Ç–∞ –≥—ñ—Å—Ç–æ—Ä—ã—è, —è–∫–∞—è —Ä–∞—Å–ø–∞–≤—è–¥–∞–µ –≥–ª–µ–¥–∞—á—É –ø—Ä–∞ —Å—Ç—Ä–∞—á–∞–Ω—ã –¥–æ–º —ñ –¥–æ—û–≥—ñ —à–ª—è—Ö, —è–∫—ñ –ø—Ä–∞–π—à–ª–æ —á–∞–ª–∞–≤–µ—Ü—Ç–≤–∞, –∫–∞–± –∑–Ω–æ—û –º–µ—Ü—å –º–∞–≥—á—ã–º–∞—Å—Ü—å –∞–ø—ã–Ω—É—Ü—Ü–∞ –¥–æ–º–∞. \n

–£ –≥—ç—Ç—ã–º —Å–ø–µ–∫—Ç–∞–∫–ª—ñ –≤—ã –ø–∞–∑–Ω–∞—ë–º—ñ—Ü–µ—Å—è –∑ –≥—ñ—Å—Ç–æ—Ä—ã—è–º—ñ –∑–Ω–∞–∫–∞–º—ñ—Ç—ã—Ö –ª—é–¥–∑–µ–π, –∑ —è–∫—ñ–º—ñ –ë–æ–≥ –∑–∞–∫–ª—é—á—ã—û –∑–∞–ø–∞–≤–µ—Ç. –õ—é–¥–∑–µ–π, —è–∫—ñ—è –ø–∞–≤–µ—Ä—ã–ª—ñ –Ø–≥–æ –∞–±—è—Ü–∞–Ω–Ω—é. \n
–®—Ç–æ –∑–¥–∞—Ä—ã–ª–∞—Å—è –∑ —Ç—ã–º—ñ –≥–µ—Ä–æ—è–º—ñ? –¶—ñ —Å—Ç—Ä–∞—Ü—ñ–ª—ñ –º—ã —Å–≤–æ–π —Å–∞–ø—Ä–∞—û–¥–Ω—ã –¥–æ–º, —ñ —Ü—ñ —ë—Å—Ü—ñ —É –Ω–∞—Å –º–∞–≥—á—ã–º–∞—Å—Ü—å –∑–Ω–æ—û –∞–ø—ã–Ω—É—Ü—Ü–∞ —Ç–∞–º?
–î–∞–≤–µ–¥–∞–µ—Ü–µ—Å—è —û –Ω–∞—Å –Ω–∞ —Å–ø–µ–∫—Ç–∞–∫–ª—ñ!

<i>üìå –£–≤–∞—Ö–æ–¥ - –ª—é–±–∞—è –∫—É–ø—é—Ä–∞. </i>`,
    parse_mode: "HTML"
  });

  await bot.sendMessage(chatId, `–ö–∞–ªi –ª–∞—Å–∫–∞, –∞–±—è—Ä—ã—Ü–µ —á–∞—Å —Å–ø–µ–∫—Ç–∞–∫–ª—è:`, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "1Ô∏è‚É£ 13 —á—ç—Ä–≤–µ–Ω—è, 20:00", callback_data: "select1" }],
        [{ text: "2Ô∏è‚É£ 15 —á—ç—Ä–≤–µ–Ω—è, 16:30", callback_data: "select2" }]
      ],
    },
  });

  users.push({
    id: chatId,
    date: '',
    line: 0,
    place: 0,
  });

  saveData();
}

const deleteBooking = async function(chatId, queryData) {
  const [_, userId, date, realLine, realPlace] = queryData.split('_');

  const booking = users.find(user => user.id == userId && user.date == date && user.line == realLine && user.place == realPlace);

  if (booking) {
    await bot.sendMessage(chatId, `–í—ã —û–ø—ç—û–Ω–µ–Ω—ã, —à—Ç–æ –∂–∞–¥–∞–µ—Ü–µ –∞–¥–º—è–Ω—ñ—Ü—å –±—Ä–∞–Ω—ñ—Ä–∞–≤–∞–Ω–Ω–µ –Ω–∞ ${realPlace} –º–µ—Å—Ü–∞ —û ${realLine} —Ä–∞–¥–∑–µ –Ω–∞ ${date}?`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚úÖ –¢–∞–∫", callback_data: `confirm_delete_${userId}_${date}_${realLine}_${realPlace}` }],
          [{ text: "‚ùå –ù–µ", callback_data: "cancel_delete" }]
        ]
      }
    });
  } else {
    await bot.sendMessage(chatId, "–ì—ç—Ç–∞ –±—Ä–∞–Ω—ñ—Ä–∞–≤–∞–Ω–Ω–µ —û–∂–æ –∞–¥–º–µ–Ω–µ–Ω–∞.");
  }
}

// Command to start booking
bot.onText(/\/start/, async (msg) => {
  await startConversation(msg);
});

// Message handler
bot.on("message", async (msg) => {

  if (msg.text === '/delete' || msg.text === '/start') return;  // Skip if the message is the delete or start command

  try {
  } catch (err) {
    console.log(err.message);
  }
});

// Callback query handler
bot.on("callback_query", async (query) => {
  try {
    await bot.answerCallbackQuery({ callback_query_id: query.id });

    const user = users.find(user => user.id == query.from.id && !user.place);

    if (query.data.includes("select")) {
      await handleDateSelection(query, user);
    } else if (query.data.includes('line')) {
      await handleLineSelection(query, user);
    } else if (query.data.includes('place')) {
      await handleSeatSelection(query, user);
    } else if (query.data === 'forward') {
      await handleDateSelection(query, user);
    } else if (query.data.includes('confirm_delete')) {
      const [userId, date, line, place] = query.data.replace('confirm_delete_', '').split('_');
      const userIndex = users.findIndex(user => user.id == userId && user.date == date && user.line == line && user.place == place);
      const user = users[userIndex];

      if (user) {
        lines[line - 1][place - 1][date] = true;
        users.splice(userIndex, 1);
        const remainingBookings = users.filter(curUser => curUser.id == user.id && curUser.date).length;

        await bot.sendMessage(query.message.chat.id, `–í–∞—à–∞ –±—Ä–∞–Ω—ñ—Ä–∞–≤–∞–Ω–Ω–µ –Ω–∞ –º–µ—Å—Ü–∞ ${place} —Ä–∞–¥–∞ ${line} –Ω–∞ ${date} –±—ã–ª–æ –∞–¥–º–µ–Ω–µ–Ω–∞.\n
${remainingBookings != 0 ? "‚ùóÔ∏è –£ –≤–∞—Å —è—à—á—ç –∑–∞—Å—Ç–∞–ª–æ—Å—è " + remainingBookings + " –∞–∫—Ç—ã—û–Ω—ã—Ö –±—Ä–∞–Ω—ñ—Ä–∞–≤–∞–Ω–Ω—è—û." : ""}`);
      } else {
        await bot.sendMessage(query.message.chat.id, "–ù–µ —û–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Å—Ü—ñ –±—Ä–∞–Ω—ñ—Ä–∞–≤–∞–Ω–Ω–µ –¥–ª—è –∞–¥–º–µ–Ω—ã.");
      }

      console.log(`Booking deleted: ${userId}, date ${date}, line ${line} place ${place}`);
      saveData();
    } else if (query.data.includes('admin_delete')) {
      const queryToParse = query.data.replace('admin_delete', '');
      let [_, userId, date, line, place] = queryToParse.split('_');
      line = Number.parseInt(line) + 1;
      place = Number.parseInt(place) + 1;
      const userIndex = users.findIndex(user => user.id == userId && user.date == date && user.line == line && user.place == place);

      if (userIndex >= 0) {
        users.splice(userIndex, 1);
        lines[line - 1][place - 1][date] = true;

        await bot.sendMessage(query.message.chat.id, `–ë—Ä–æ–Ω—å –Ω–∞ –º–µ—Å—Ü–∞ ${place} —Ä–∞–¥–∞ ${line} –Ω–∞ ${date} –±—ã–ª–∞ –∞–¥–º–µ–Ω–µ–Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∞—Ä–∞–º.`);
        const remainingBookings = users.filter(user => user.id == userId && user.date).length;

        if (remainingBookings > 0) {
          await bot.sendMessage(userId, `–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∞—Ä –∞–¥–º—è–Ω—ñ—û –≤–∞—à—É –±—Ä–æ–Ω—å –Ω–∞ –º–µ—Å—Ü–∞ ${place} —Ä–∞–¥–∞ ${line} –Ω–∞ ${date}. –ó–≤—è—Ä–Ω—ñ—Ü–µ —û–≤–∞–≥—É, —à—Ç–æ —û –≤–∞—Å –∑–∞—Å—Ç–∞–ª–æ—Å—è  ${remainingBookings} –∞–∫—Ç—ã—û–Ω—ã—Ö –±—Ä–∞–Ω—ñ—Ä–æ—û–∫—ñ(–∞—û).`);
        } else {
          await bot.sendMessage(userId, `–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∞—Ä –∞–¥–º—è–Ω—ñ—û –≤–∞—à—É –±—Ä–æ–Ω—å –Ω–∞ –º–µ—Å—Ü–∞ ${place} —Ä–∞–¥–∞ ${line} –Ω–∞ ${date}.`);
        }

        saveData();
      } else {
        await bot.sendMessage(query.message.chat.id, "–ù–µ —û–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Å—Ü—ñ –±—Ä–∞–Ω—ñ—Ä–æ—û–∫—É –¥–ª—è –∞–¥–º–µ–Ω—ã.");
      }
    } else if (query.data === 'cancel_delete') {
      await bot.sendMessage(query.message.chat.id, "–ê–¥–º–µ–Ω–µ–Ω–∞.");
    } else if (query.data === "how_to_get") {
      await bot.sendMessage(query.message.chat.id, `<b>–Ø–∫ –¥–∞–µ—Ö–∞—Ü—å: </b>\n
‚ô¶Ô∏è<a href="https://yandex.by/maps/-/CDruJ-Mp">–ü–∞–≥–ª—è–¥–∑–µ—Ü—å —û –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö</a>

üöå –ê—û—Ç–æ–±—É—Å—ã\n
<i>- –∞–¥ –≤–∞–∫–∑–∞–ª–∞ –∞—û—Ç–æ–±—É—Å–∞–º 115—ç, –ø—Ä–∞–∑ –Ø–∫. –ö–æ–ª–∞—Å–∞, –í–∞–ª–≥–∞–≥—Ä–∞–¥—Å–∫—É—é (–ú–∞—Å–∫–æ—û—Å–∫—É—é). </i>\n
<i>- –∑ –í–∞–ª–≥–∞–≥—Ä–∞–¥—Å–∫–∞–π (–º. –ú–∞—Å–∫–æ—û—Å–∫–∞—è) –∞—û—Ç–æ–±—É—Å—ã 113—Å, 145—Å, 115—ç.</i> \n
üöç –Ø—à—á—ç —ë—Å—Ü—å –º–∞—Ä—à—Ä—É—Ç–∫—ñ 1151,1455,1554,1409\n
<b>–í—ã—Ö–æ–¥–∑—ñ—Ü—å –Ω–∞ –ø—Ä—ã–ø—ã–Ω–∫—É "–†–∞—ë–Ω–Ω–∞—è –±–∞–ª—å–Ω—ñ—Ü–∞" —ñ —ñ—Å—Ü—ñ –Ω–∞–ø–µ—Ä–∞–¥ 200–º. </b>\n`,
          {
            parse_mode: "HTML"
          });
      await bot.sendVideo(query.message.chat.id, "./guide.mp4", {
        caption: "üîπ –Ø–∫ –¥–∞–π—Å—Üi –∞–¥ –∞—Å—Ç–∞–Ω–æ—û–∫—ñ",
        width: 704,
        height: 1280
      });
    } else if (query.data === 'start') {
      await startConversation(query.message);
    } else if (query.data.includes('delete')) {
      const chatId = query.message.chat.id;
      await deleteBooking(chatId, query.data);
    }
  } catch (err) {
    console.log(err);
  }
});

// Schedule a job to run every day at a specific time (e.g., 8:00 AM) to send reminders
cron.schedule('0 8 * * *', () => {
  const today = new Date();
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);
  const formattedTomorrow = `${('0' + tomorrow.getDate()).slice(-2)}.${('0' + (tomorrow.getMonth() + 1)).slice(-2)}.${tomorrow.getFullYear()}`;

  users.forEach(user => {
    if (user.date.startsWith(formattedTomorrow)) {
      bot.sendMessage(user.id, `–ù–∞–≥–∞–¥–≤–∞–µ–º, —à—Ç–æ –∑–∞—û—Ç—Ä–∞ —û –≤–∞—Å –±—Ä–∞–Ω—ñ—Ä–∞–≤–∞–Ω–Ω–µ:\n\n` +
          `–î–∞—Ç–∞: ${user.date}\n` +
          `–†–∞–¥: ${user.line}\n` +
          `–ú–µ—Å—Ü–∞: ${user.place}\n` +
          `–ê–¥—Ä–∞—Å: –≤—É–ª. –ü–µ—Ä—à–∞–º–∞–π—Å–∫–∞—è 23\n\n` +
          `–ö–∞–ª—ñ –ª–∞—Å–∫–∞, –Ω–µ –∑–∞–±—É–¥–∑—å—Ü–µ—Å—è –∑'—è–≤—ñ—Ü—Ü–∞!\n` +
          `–í—ã —Ç–∞–∫—Å–∞–º–∞ –º–æ–∂–∞—Ü–µ –∞–¥–º—è–Ω—ñ—Ü—å –±—Ä–∞–Ω—ñ—Ä–∞–≤–∞–Ω–Ω–µ –∫–∞–º–∞–Ω–¥–∞–π /delete`);
    }
  });
});
